### SLIDE 2 ###
	A Industria de desenvolvimento de software movimentou cerca de 1,23 trilhoes de dolares em 2008 e possui um crescimento anual de 3%.
	Com esse grande crescimento do mercado de desenvolvimento de software o numero de empresas neste segmento aumentou e a disputa entre essas empresas tambem aumentou.
	Para ganhar mercado e conquistar mais clientes, as empresas buscam aumentar sua produtividade atendendo seus clientes de forma rápida.
	Muitas vezes para conseguir essa produtividade a qualidade do processo para desenvolver software é deixada de lado, ou seja, partes do processo que aumentam a qualidade do produto final nao sao executadas para conseguir ter resultados com custos menores.
	A curto prazo essa estratégia de deixar a qualidade de lado pode ser interessante, tendo em vista que o cliente ficará satisfeito com os resultados.
	Mas a longo prazo essa estratégia traz consequências impactantes na evolucao do software, com desatencao para a qualidade o numero de defeitos do software tende a ser grande e a correcao desses defeitos é muito mais custosa em uma fase final do projeto. 
	Esse problema pode ser considerado uma oportunidade para melhoria do processo de desenvolvimento de software.
	
### SLIDE 3 ###	
	Para conseguirmos essa melhoria no processo de desenvolvimento de software devemos entender com essa melhoria de processo ocorreu em outras areas da industria mundial.
	O pensamento Lean surgiu no Japao na decada de 40, é conhecido tambem por cultura Toyota porque surgiu na Toyota.
	Dois engenheiros da Toyota foram designados a estudar uma maneira para reduzir os custos no processo de producao dos veiculos, eles fizeram um mapeamento do processo de producao e detectaram os pontos onde existiam desperdicios e assim descobrir maneiras para evitar esse desperdicio.
	Foi dai que surgiu o pensamento Lean que tem como seu principal pilar a reducao de desperdicios.
	O pensamento Lean pode ser adaptado e aplicado no ciclo de desenvolvimento de qualquer outro produto, até no desenvolvimento de software, que é o foco deste trabalho.
	
### SLIDE 4 ###	
	Neste Slide estao os principios do pensamento Lean aplicados ao desenvolvimento de software.
	Elimine o disperdicio: Evitar o planejamento excessivo e desenvolvimento de funcionalidades que nao agregam valor ao cliente, reduzindo o custo do desenvolvimento.
	Amplifique o aprendizado: Mapear problemas e soluções comuns levantados pelos membros da equipe de desenvolvimento e divulgar essa lista para toda a equipe, disseminando conhecimento e reduzindo o tempo gasto na deteccao e solucao de problemas.
	Entregue rapido: Liberar versoes pequenas e frequentes para o cliente, para que ele possa avaliar o que esta sendo desenvolvido e sugerir mudancas.
	Valorize a equipe: Este ponto está relacionado em se buscar maneiras para motivar a equipe. A estratégia para atender este principio vai depender muito da cultura da empresa em questao.
	Adicione seguranca: As palavras mais adequadas para este topico sao automacao e automatizacao do processo de desenvolvimento, ou seja, deve-se adicionar seguranca no processo criando etapas que nao dependam da intervencao humana para sua execucao, ja que os humanos, por mais que treinados e capacitados podem errar.

### SLIDE 5 ###		
	Depois de mostrar os principios Lean aplicados ao desenvolvimento de software, vou mostrar como atender esses principios atraves de praticas ageis.
	Programacao em pares: 
		A programacao em pares consiste no desenvolvimento em conjunto de uma funcionalidade. 
		Essa pratica auxilia a eliminar o desperdicio durante o desenvolvimento, ja que um desenvolvedor vai ajudar o outro a nao criar codigo desnecessario.
		Alem disso ajuda a compartilhar conhecimento entre os membros da equipe
		E tambem ajuda a adicionar seguranca ao codigo que foi desenvolvido porque a programacao em pares intensifica o processo de revisao de codigo, porque tudo que é desenvolvido passa pela analise de dois desenvolvedores.
	Integracao Rápida: 
	Consiste no processo de exercitar seu codigo continuamente ajudando na verificacao de seu funcionamento, normalmente essa pratica é executada com ajuda de uma ferramenta para integracao continua.
		Essa pratica auxilia em entregas frequentes para o cliente porque reduz o ciclo de testes.
	Design simples: 
		Essa pratica diz que devemos sempre fazer o codigo mais simples possivel para atender uma funcionalidade, ou seja, nao devemos criar codigo complexo sem precisar.
		O Design simples contribui principalmente para a eliminacao do desperdicio.
	Feedback do cliente: 
		Esta é uma das praticas mais importantes porque tenta deixar o cliente mais perto da equipe de desenvolvimento para aumentar a frequencia de avaliacao do software pelo cliente e evitar falhas na comunicacao com o cliente.
		A figura do proximo slide mostra o que acontece quando existe problema de comunicacao entre a equipe de desenvolvimento e o cliente.
		
### SLIDE 6 ###		
	Se a interacao com o cliente em cada uma das fases fosse frequente, talvez o erro fosse detectado mais cedo.
	
### SLIDE 7 ###			
	Outra pratica agil muito conhecido e talvez uma das mais importantes é o Test Driven Development, tambem conhecido como TDD.
	O TDD consiste basicamente em escrever uma rotina de testes baseada em requisitos de uma funcionalidade do sistema, esses testes ao serem executados, obviamente, vao falhar ja que nao existe codigo para suprir as necessidades deste teste.
	Em seguida é desenvolvido o codigo para atender as necessidades do teste e assim que esse codigo estiver funcionando de acordo com os testes o desenvolvedor pode refatorar o codigo, ou seja, ele pode reestruturar o codigo para melhor seu design e facilitar manutencoes futuras.
	O ciclo de desenvolvimento convencional funciona da seguinte maneira: o desenvolvedor cria o codigo para uma funcionalidade e em seguida passa para um testador avaliar o que foi desenvolvido, o testador gera uma lista de defeitos e retorna para o desenvolvedor e finalmente o desenvolvedor corrige os defeitos levantados pelo testador.
	O fluxo convencional envolve duas pessoas e normalmente gasta muito tempo, ou seja, o custo é maior.
	O TDD tende a ter um cust menor porque apenas uma pessoa é necessária para a maior parte das verificacoes, sem contar na velocidade em que os erros sao encontrados e corrigidos. O desenvolvedor implementa um codigo para atender um teste e ja pode ver se a implementacao foi efetiva ou nao. O feedback é instantaneo.

### SLIDE 8 ###		
	Algumas vantanges do TDD sao:
		Evita a criacao de codigo desnecessario, ja que o codigo desenvolvido se restringe apenas as necessidades do teste.
		Aumenta o feedback do codigo para o desenvolvedor: A medida que o desenvoldedor cria codigo para o teste ele ja ve se o que ele implementou fez o teste passar ou nao.
		Aumenta a seguranca durante a manutencao do sistema: Essa vantagem é muito importante. Para exemplificar vou usar o seguinte cenario: tenho um sistema que possui 10 funcionalidades que foram criadas usando TDD, ou seja, elas possui testes que validam seus comportamentos, vamos supor que eu queira introduzir uma nova funcionalidade que possa dar impacto nessas funcionalidades existentes, normalmente o tempo para liberar essa nova funcionalidade é grande porque a equipe precisa validar os impactos e testar todo o sistema para garantir que nada foi estragado devido a nova implementacao. Por estarmos usando TDD podemos executar o conjunto de testes existente para todas as funcionalidades e verificar se eles continuam passando com sucesso ou nao. Assim temos uma seguranca muito grande para fazer modificacoes no sistema sem a necessidade de testar manualmente todas funcionalidades.
		
### SLIDE 9 ###
		Para demonstrar que as vatagens decorrentes do desenvolvimento utilizando os principios Lean e as praticas ageis vou introduzir o estudo de caso a voces.
		O sistema do estudo de caso é um sistema de catalogo digital para restaurante, ou seja, um cardapio de restaurante.
		O sistema é composto pela sua parte web e sua parte movel, ambas desenvolvidas com uso de TDD.
		A comunicacao entre elas é feita por HTTP.
		O funcionamento basico do sistema ocorre da seguinte forma: O administrador do resutaurante cadastra os itens disponiveis no restaurante no sistema web e o cliente do restaurante pode visualiza-los em um tablet, representando o cardapio do estabelecimento.
		
### SLIDE 10 ###
	Este é o diagrama de caso de uso do sistema web, o ator principal é o Administrador do restaurante e os casos de uso sao:
	Gerenciar os usuarios, onde o administrador pode cadastrar, editar, excluir os usuarios do sistema.
	Gerenciar categorias, onde o administrador pode manipular as categorias do itens do restaurante.
	Gerenciar Itens, onde o administrador pode manipular os itens do restaurante.
	E o sistema tambem possui uma funcionalidade para disponibilizar uma versao do aplicacao mobile para download.

### SLIDE 11 ###
	Este é o diagrama de dominio do sistema, o sistema é bem simples, ele possui a entidade usuario, categoria e item.
	Um usuario possui muitas categorias e uma categoria possui muitos itens.
	
### SLIDE 12 ###
	O sistema web foi desenvolvido utilizando ruby on rails devido a grande quantidade de plugins para o desenvolvimento orientado a testes, que é o foco deste trabalho.
	No sistema web foram desenvolvidos: 
		testes de unidade, que sao testes que testam uma classe isolada das outras
		testes de integracao, que validam o comportamento de varias unidades em conjunto
	Os testes foram desenvolvidos utilizando um plugin chamado RSpec, que facilidade a escrita dos testes e ajuda na expressividade do codigo de teste
	
### SLIDE 13 ###
	Esta figura exemplifica um codigo de teste escrito para a classe Categoria.
	Podemos verificar que das linhas 7 a 10 foram feitas validacoes de relacionamento e existencia de atributos.
	Pode-se ver que os testes sao bem intuitivos e expressivos, consegue-se isso com a ajuda do rspec.
	Alem das verificacoes simples pode-se criar verificacoes mais customizadas e complexas como é mostrado apartir da linha 12.
	
### SLIDE 14 ###
	Esta figura mostra o codigo desenvolvido para atender os requisitos do teste mostrado no slide anterior, podemos ver que o codigo é bem simples e bem legivel, assim como o codigo de teste.
	
### SLIDE 15 ###	
	Agora vamos falor um pouco do sistema mobile.
	Este é o diagrama de casos de uso do sistema mobile, onde os principais atores sao o gracom e o cliente do restaurante.
	O caso de uso configurar sistema é onde o garcom configura as credenciais do restaurante para fazer a comunicacao com o sistema web e obter os dados cadastrados atraves do caso de uso de sincronizacao dos cadastros.
	E por fim, o caso de uso de visualizacao dos itens pode ser disparado pelo garcom e pelo cliente do restaurante.
	
### SLIDE 16 ###
	O sistema mobile foi desenvolvido para a plataforma android, devido ao crescimento da plataforma e de nao existir nenhum custo associado ao desenvolvimento utilizando esta plataforma. Ao contrario do desenvolvimento para IPhone/IPad onde o desenvolvedor precisa pagar uma licenca para desenvolver seus aplicativos.
	No sistema mobile foram criados apenas testes de integracao devido a dificuldade existente na criacao de testes causada pela falta de ferramentas de teste para android.
	
### SLIDE 17 ###
	Esta figura mostra um exemplo de codigo de teste para a tela de configuracao do sistema mobile.
	Podemos ver que o teste valida a presenca de alguns textos na tela.
	
### SLIDE 18 ###
	Esta figura mostra a tela de configuracao do sistema mobile que tem seu codigo de teste mostrado no slide anterior.
	
### SLIDE 19 ###
	Para analisar os resultados obtidos durante o desenvolvimento desses dois sistemas foram gerados relatorios de cobertura para cada um deles.
	A cobertura de testes relaciona a quantidade de linhas de codigo que sao testadas com a quantidade de linhas de codigo que foram desenvolvidas e essa relacao nos da uma medida percentual que representa a porcentagem de cobertura do codigo.
	Segundo o autor Tassey, quanto maior for a cobertura do codigo de uma aplicacao, menor sera o numero de defeitos no sistema, ou seja, quanto maior a taxa de cobertura melhor.

### SLIDE 20 ###	
	Este slide mostra o relatoio de cobertura para o sistema web, este relatorio mostra que 90,48% das linhas de codigo da aplicacao web estao cobertas por testes.
	Neste relatorio podemos ver a porcentagem de cobertura separada por camada da aplicacao e com base nessas informacoes podemos tomar decisoes de melhoria em pontos especificos do codigo.
	
### SLIDE 21 ###		
	Este slide mostra o relatoio de cobertura para o sistema mobile, a metrica utilizada para avaliar cobertura foi a metrica que mede a porcentagem de linhas de codigo cobertas por teste. Neste relatorio podemos ver 73% das linhas estao cobertas por testes.
	Quando comparamos aos 90% de cobertura do sistema web podemos ver uma significante diferenca que resulta em um indicador de qualidade maior para o sistema web.
	
### SLIDE 22 ###
	A conclusao é bem breve e simples.
	Quando utilizamos desenvolvimento orientado a testes, temos um aumento na cobertura de testes do sistema e esse aumento da cobertura resulta na reducao de defeitos do sistema, com a reducao dos defeitos do sistema temos um aumento na qualidade do mesmo e aumentando a qualidade conseguimos uma reducao nos custos durante o desenvolvimento. Disponibilizando um software com mais qualidade e mais barato para o cliente final.